{
  pkgs,
  lib,
  config,
  osConfig,
  ...
}:
{
  options.hm.hyprland.enable = lib.mkEnableOption "Hyprland";

  config = lib.mkIf config.hm.hyprland.enable {
    wayland.windowManager.hyprland.enable = true;
    wayland.windowManager.hyprland.settings = {
      ecosystem.no_update_news = true;

      autogenerated = 0;
      #"$killActiveWindow" = ''
      #  hyprctl activewindow | \
      #  grep -oP --color=never 'pid:\s+\K\d+' | \
      #  while read -r pid; do 
      #      if kill "$pid"; then 
      #          for i in {1..5}; do 
      #              sleep 0.5
      #              kill -0 "$pid" 2>/dev/null || exit
      #              [ "$i" -eq 5 ] && kill -9 "$pid"
      #          done
      #      fi
      #  done
      #'';

      bind = [
        # Audio Control
        " ,XF86AudioRaiseVolume,exec,wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"
        " ,XF86AudioLowerVolume,exec,wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
        " ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
        " ,XF86AudioPlay, exec, playerctl play-pause"
        " ,XF86AudioPause, exec, playerctl play-pause"
        " ,XF86AudioNext, exec, playerctl next"
        " ,XF86AudioPrev, exec, playerctl previous"
      ]
      ++ (builtins.concatLists (
        builtins.genList (
          x:
          let
            ws =
              let
                c = (x + 1) / 10;
              in
              builtins.toString (x + 1 - (c * 10));
          in
          [
            "$mainMod, ${ws}, workspace, ${toString (x + 1)}"
            "$mainMod SHIFT, ${ws}, movetoworkspace, ${toString (x + 1)}"
          ]
        ) 10
      ));

      windowrulev2 =
        let
          hasPkg = pkg: lib.any (p: p == pkg) (osConfig.environment.systemPackages or config.home.packages);
          mkRule = cls: cond: lib.optionals cond [ "float, class:^(${cls})$" ];
        in
        [
          "suppressevent maximize, class:.*"
          "immediate, class:^(*.exe)$"
        ]
        ++ mkRule "1Password" (osConfig.programs._1password-gui.enable)
        ++ mkRule "Bitwarden" (hasPkg pkgs.bitwarden)
        ++ mkRule "KeePassXC" (hasPkg pkgs.keepassxc);

      cursor.no_hardware_cursors = 1;
    };
  };
}
